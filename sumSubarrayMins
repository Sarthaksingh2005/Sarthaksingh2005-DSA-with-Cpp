class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) 
    {
        //1
        int n = arr.size();
        const int MOD = 1e9+7;

        //2
        vector<int> left(n), right(n);
        stack<int> s;

        //3
        for (int i = 0; i < n; i++)
        {
            while (!s.empty() && arr[s.top()] > arr[i])
            {
                s.pop();
            }
            left[i] = s.empty() ? i + 1 : i - s.top();
            s.push(i);
        }

        
        while (!s.empty())
        {
            s.pop();
        }

        //4
        for (int i = n - 1; i >= 0; i--)
        {
            while (!s.empty() && arr[s.top()] >= arr[i])
            {
                s.pop();
            }
            right[i] = s.empty() ? n - i : s.top() - i;
            s.push(i);
        }

        //5 
        long long ans = 0;
        for (int i = 0; i < n; i++)
        {
            long long contrib = (long long)arr[i] * left[i] * right[i];
            ans = (ans + contrib) % MOD;
        }

        //6
        return (int)ans;
    }
};
