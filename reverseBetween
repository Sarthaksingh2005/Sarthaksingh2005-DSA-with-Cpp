/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) 
    {
        if (!head || left == right) return head;

        // Dummy node simplifies edge cases (like reversing from head)
        ListNode* dummy = new ListNode(0);
        dummy->next = head;

        ListNode* prev = dummy;

        // Step 1: Move prev to the node just before "left"
        for (int i = 1; i < left; i++) {
            prev = prev->next;
        }

        // Step 2: Pointers for the reversal
        ListNode* start = prev->next;       // first node in the sublist
        ListNode* then = start->next;       // node that will be moved

        // Step 3: Reverse nodes between left and right
        for (int i = 0; i < right - left; i++) {
            start->next = then->next;   // detach "then"
            then->next = prev->next;    // insert "then" right after prev
            prev->next = then;          // connect prev to "then"
            then = start->next;         // move "then" forward
        }

        return dummy->next;  // return new head
    }
};
