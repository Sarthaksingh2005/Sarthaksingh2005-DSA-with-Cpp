class Solution {
public:
    long long subArrayRanges(vector<int>& nums) 
    {
        int n = nums.size();

        
        vector<int> left(n), right(n);
        stack<int> s;

        
        for (int i = 0; i < n; i++) {
            while (!s.empty() && nums[s.top()] > nums[i]) s.pop();
            left[i] = s.empty() ? i + 1 : i - s.top();
            s.push(i);
        }

        while (!s.empty()) s.pop();

        
        for (int i = n - 1; i >= 0; i--) {
            while (!s.empty() && nums[s.top()] >= nums[i]) s.pop();
            right[i] = s.empty() ? n - i : s.top() - i;
            s.push(i);
        }

        long long sumMin = 0;
        for (int i = 0; i < n; i++) {
            sumMin += (long long) nums[i] * left[i] * right[i];
        }

        
        while (!s.empty()) s.pop();

        
        for (int i = 0; i < n; i++) {
            while (!s.empty() && nums[s.top()] < nums[i]) s.pop();
            left[i] = s.empty() ? i + 1 : i - s.top();
            s.push(i);
        }

        while (!s.empty()) s.pop();

       
        for (int i = n - 1; i >= 0; i--) {
            while (!s.empty() && nums[s.top()] <= nums[i]) s.pop();
            right[i] = s.empty() ? n - i : s.top() - i;
            s.push(i);
        }

        long long sumMax = 0;
        for (int i = 0; i < n; i++) {
            sumMax += (long long) nums[i] * left[i] * right[i];
        }

       
        return sumMax - sumMin;
    }
};
