/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) 
    {
        unordered_map<TreeNode*,TreeNode*> parent;
        buildparentmap(root,parent);

        unordered_set<TreeNode*> visited;
        queue<TreeNode*> q;
        q.push(target);
        visited.insert(target);
        int level = 0;

        while(!q.empty())
        {
            int s = q.size();
            if(level == k) break;

            for(int i = 0; i < s; i++)
            {
                TreeNode* curr = q.front();
                q.pop();

                if(curr->left && !visited.count(curr->left))
                {
                    q.push(curr->left);
                    visited.insert(curr->left);
                }
                if(curr->right && !visited.count(curr->right))
                {
                    q.push(curr->right);
                    visited.insert(curr->right);
                }
                if(parent[curr] && !visited.count(parent[curr]))
                {
                    q.push(parent[curr]);
                    visited.insert(parent[curr]);
                }
            }
            level++;
        }

        vector<int> res;
        while(!q.empty())
        {
            res.push_back(q.front()->val);
            q.pop();
        }
        return res;
    }

    void buildparentmap(TreeNode* root, unordered_map<TreeNode*,TreeNode*>& parent)
    {
        if(root == NULL)
        return;

        queue<TreeNode*> q;
        q.push(root);
        parent[root] = NULL;

        while(!q.empty())
        {
            TreeNode* curr = q.front();
            q.pop();

            if(curr->left)
            {
                parent[curr->left] = curr;
                q.push(curr->left);
            }
            if(curr->right)
            {
                parent[curr->right] = curr;
                q.push(curr->right);
            }
        }
    }
};
