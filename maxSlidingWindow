class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) 
    {
        
 //1
        deque<int> dq;
        vector<int> res;

        //2   1st window(compare and pop)
        for (int i = 0; i < k; i++) {
            while (dq.size() > 0 && nums[dq.back()] < nums[i]) {
                dq.pop_back();
            }
            dq.push_back(i);
        }

        //3 ahead window
        for (int i = k; i < nums.size(); i++) {
            res.push_back(nums[dq.front()]);

            //4  remove if not part of current window 
            while (dq.size() > 0 && dq.front() <= i - k) {
                dq.pop_front();
            }

            //5 remove smaller values
            while (dq.size() > 0 && nums[dq.back()] <= nums[i]) {
                dq.pop_back();
            }
            dq.push_back(i);
        }

        //6 push back last window result
        res.push_back(nums[dq.front()]);

        return res;
    }
    
        
    
};
